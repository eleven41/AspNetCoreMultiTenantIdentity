using System;
using System.Linq;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Options;

namespace Eleven41.AspNetCore.MultiTenantIdentity.EntityFrameworkCore
{
    public static class MultiTenantIdentityContextCommon<TUser, TTenant, TKey>
        where TUser : MultiTenantUser<TKey>
        where TTenant : IdentityTenant<TKey>
        where TKey : IEquatable<TKey>
    {
        private static MultiTenantIdentityOptions GetOptions(DbContext context) => context.GetService<IDbContextOptions>()
                            .Extensions.OfType<CoreOptionsExtension>()
                            .FirstOrDefault()?.ApplicationServiceProvider
                            ?.GetService<IOptions<MultiTenantIdentityOptions>>()
                            ?.Value;

        public static void OnModelCreating(ModelBuilder builder, DbContext context)
        {
            var options = GetOptions(context);
            var maxKeyLength = options.Stores?.MaxLengthForKeys ?? 0;

            {
                var tenant = builder.Entity<TTenant>();

                // Indexes on the table
                tenant.HasIndex(t => t.NormalizedDomain)
                    .IsUnique();

                // Properties
                tenant.Property(t => t.Name)
                    .HasMaxLength(256);

                tenant.Property(t => t.Domain)
                    .HasMaxLength(256);

                tenant.Property(t => t.NormalizedDomain)
                    .HasMaxLength(256);

                tenant.Property(t => t.ConcurrencyStamp)
                    .IsConcurrencyToken();

                tenant.ToTable("AspNetTenants");
            }

            {
                var user = builder.Entity<TUser>();

                user.Property(u => u.TenantId)
                    .IsRequired();

                if (options.Users?.IsUsersIsolated ?? false)
                {
                    // Remove the index generated by Identity Core
                    var indexToRemove = user.HasIndex(u => new { u.NormalizedUserName }).Metadata;
                    user.Metadata.RemoveIndex(indexToRemove.Properties);

                    // Add our own
                    user.HasIndex(u => new { u.NormalizedUserName, u.TenantId })
                       .IsUnique()
                       .HasName("UserNameIndex");
                }

                // Setup the foreign key from user to tenant
                user.HasOne<TTenant>()
                    .WithMany()
                    .HasForeignKey(u => u.TenantId);
            }
        }
    }
}
